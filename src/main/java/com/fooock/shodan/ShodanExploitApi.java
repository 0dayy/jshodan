package com.fooock.shodan;

import com.fooock.shodan.model.exploit.ExploitCount;
import com.fooock.shodan.model.exploit.ExploitReport;
import rx.Observable;

/**
 * Main entry point to interact with the Shodan exploit API
 */
public final class ShodanExploitApi extends AbstractApi {

    private final ExploitService exploitService;

    /**
     * Create this object with the account api key. If the key is null or empty
     * then an {@link IllegalArgumentException} is thrown
     *
     * @param apiKey account api key
     */
    public ShodanExploitApi(String apiKey) {
        super(apiKey);
        this.exploitService = serviceCreator.getExploitService();
    }

    /**
     * Search across a variety of data sources for exploits. If the query is null or
     * empty an {@link IllegalArgumentException} is thrown
     *
     * @param query Search query used to search the database of known exploits.
     * @return {@link Observable<ExploitReport>}
     */
    public Observable<ExploitReport> search(String query) {
        if (query == null || query.isEmpty()) {
            throw new IllegalArgumentException("Query can't be null or empty");
        }
        return exploitService.search(apiKey, query);
    }

    /**
     * Search across a variety of data sources for exploits. If the query is null or
     * empty an {@link IllegalArgumentException} is thrown
     *
     * @param query Search query used to search the database of known exploits.
     * @param facet A comma-separated list of properties to get summary information on
     * @return {@link Observable<ExploitReport>}
     */
    public Observable<ExploitReport> search(String query, String facet) {
        if (query == null || query.isEmpty()) {
            throw new IllegalArgumentException("Query can't be null or empty");
        }
        return exploitService.search(apiKey, query, facet);
    }

    /**
     * Search across a variety of data sources for exploits. If the query is null or
     * empty an {@link IllegalArgumentException} is thrown. Also if the page parameter
     * is minor than 0 an {@link IllegalArgumentException} is thrown
     *
     * @param query Search query used to search the database of known exploits.
     * @param facet A comma-separated list of properties to get summary information on
     * @param page  The page number to page through results 100 at a time.
     * @return {@link Observable<ExploitReport>}
     */
    public Observable<ExploitReport> search(String query, String facet, int page) {
        if (query == null || query.isEmpty()) {
            throw new IllegalArgumentException("Query can't be null or empty");
        }
        if (page < 0) {
            throw new IllegalArgumentException("Page can't be < 0");
        }
        return exploitService.search(apiKey, query, facet, page);
    }

    /**
     * This method behaves identical to the "/search" method with the difference that it doesn't return any results.
     * If the query is null or empty an {@link IllegalArgumentException} is thrown.
     *
     * @param query Search query used to search the database of known exploits.
     * @return {@link Observable<ExploitCount>}
     */
    public Observable<ExploitCount> count(String query) {
        if (query == null || query.isEmpty()) {
            throw new IllegalArgumentException("Query can't be null or empty");
        }
        return exploitService.count(apiKey, query);
    }

    /**
     * This method behaves identical to the "/search" method with the difference that it doesn't return any results.
     * If the query is null or empty an {@link IllegalArgumentException} is thrown.
     *
     * @param query Search query used to search the database of known exploits.
     * @param facet A comma-separated list of properties to get summary information on
     * @return {@link Observable<ExploitReport>}
     */
    public Observable<ExploitReport> count(String query, String facet) {
        if (query == null || query.isEmpty()) {
            throw new IllegalArgumentException("Query can't be null or empty");
        }
        return exploitService.count(apiKey, query, facet);
    }
}
