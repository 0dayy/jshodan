package com.fooock.shodan;

import com.fooock.shodan.model.exploit.ExploitCount;
import com.fooock.shodan.model.exploit.ExploitReport;
import retrofit2.http.GET;
import retrofit2.http.Query;
import rx.Observable;

/**
 * The Exploits API provides access to several exploit/vulnerability data sources.
 */
public interface ExploitService {

    /**
     * Search across a variety of data sources for exploits
     *
     * @param apiKey account api key
     * @param query  exploit query
     * @return {@link Observable<ExploitReport>}
     */
    @GET("api/search")
    Observable<ExploitReport> search(@Query("key") String apiKey, @Query("query") String query);

    /**
     * Search across a variety of data sources for exploits and use facets to get summary information.
     *
     * @param apiKey account api key
     * @param query  exploit query
     * @param facets exploit facet query, separated by comma
     * @return {@link Observable<ExploitReport>}
     */
    @GET("api/search")
    Observable<ExploitReport> search(@Query("key") String apiKey,
                                     @Query("query") String query,
                                     @Query("facets") String facets);

    /**
     * Search across a variety of data sources for exploits and use facets to get summary information.
     *
     * @param apiKey account api key
     * @param query  exploit query
     * @param facets exploit facet query, separated by comma
     * @param page   The page number to page through results 100 at a time.
     * @return {@link Observable<ExploitReport>}
     */
    @GET("api/search")
    Observable<ExploitReport> search(@Query("key") String apiKey,
                                     @Query("query") String query,
                                     @Query("facets") String facets,
                                     @Query("page") int page);

    /**
     * This method behaves identical to the "/search" method with the difference that it doesn't return any results.
     *
     * @param apiKey account api key
     * @param query  exploit query
     * @return {@link Observable<ExploitCount>}
     */
    @GET("api/count")
    Observable<ExploitCount> count(@Query("key") String apiKey, @Query("query") String query);

    /**
     * This method behaves identical to the "/search" method with the difference that it doesn't return any results.
     *
     * @param apiKey account api key
     * @param query  exploit query
     * @param facets exploit facet query, separated by comma
     * @return {@link Observable<ExploitReport>}
     */
    @GET("api/count")
    Observable<ExploitReport> count(@Query("key") String apiKey,
                                    @Query("query") String query,
                                    @Query("facets") String facets);

}
