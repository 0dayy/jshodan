package com.fooock.shodan.mock;

import com.fooock.shodan.ExploitService;
import com.fooock.shodan.ReadJson;
import com.fooock.shodan.model.exploit.*;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import io.reactivex.Observable;
import retrofit2.http.Query;
import retrofit2.mock.BehaviorDelegate;

import java.lang.reflect.Type;

/**
 *
 */
public class ExploitServiceMock implements ExploitService {

    private final Gson gson = new Gson();
    private final BehaviorDelegate<ExploitService> delegate;

    public ExploitServiceMock(BehaviorDelegate<ExploitService> delegate) {
        this.delegate = delegate;
    }

    @Override
    public Observable<ExploitReport> search(@Query("key") String apiKey, @Query("query") String query) {
        Exploit exploit = gson.fromJson(ReadJson.readFile("exploit_search.json"), Exploit.class);
        return delegate.returningResponse(exploit).search(apiKey, query);
    }

    @Override
    public Observable<ExploitReport> search(@Query("key") String apiKey,
                                            @Query("query") String query,
                                            @Query("facets") String facets) {
        Type exploitType = new TypeToken<Exploit>() {
        }.getType();
        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(exploitType, new ExploitDeserializer());

        ExploitReport exploitResult = gsonBuilder.create().fromJson(
                ReadJson.readFile("exploit_search_with_facet.json"), ExploitReport.class);
        return delegate.returningResponse(exploitResult).search(apiKey, query, facets);
    }

    @Override
    public Observable<ExploitReport> search(@Query("key") String apiKey,
                                            @Query("query") String query,
                                            @Query("facets") String facets,
                                            @Query("page") int page) {
        return null;
    }

    @Override
    public Observable<ExploitCount> count(@Query("key") String apiKey, @Query("query") String query) {
        return null;
    }

    @Override
    public Observable<ExploitReport> count(@Query("key") String apiKey,
                                           @Query("query") String query,
                                           @Query("facets") String facets) {
        Facet facet = gson.fromJson(ReadJson.readFile("exploit_count_with_facet.json"), Facet.class);
        return delegate.returningResponse(facet).count(apiKey, query, facets);
    }
}
